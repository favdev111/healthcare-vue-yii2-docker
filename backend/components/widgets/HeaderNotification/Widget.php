<?php

namespace  backend\components\widgets\HeaderNotification;

use common\models\TutorPro;
use modules\account\models\Account;
use modules\account\models\Job;
use modules\account\models\Role;
use modules\chat\models\ChatSearch;
use Yii;
use modules\payment\models\Transaction;

/**
 * Class Notification
 * @package backend\components\widgets
 */
class Widget extends \yii\base\Widget
{
    const USER_TYPE_TUTOR = 'tutor';
    const USER_TYPE_STUDENT = 'student';

    const TYPE_NEW_USERS = 1;
    const TYPE_USERS_PROFILE_EDITED = 2;
    const TYPE_AUTO_GENERATED_JOBS = 3;
    const TYPE_PRO_SERVICE = 4;
    const TYPE_NEW_UNAPPROVED_PAYMENTS = 5;
    const TYPE_NEW_UNAPPROVED_ARTICLES = 6;

    /**
     * @var array
     */
    public static $notificationContentMethods = [
        'newTutorsNotify',
        'newStudentsNotify',
        'suspiciousUsersNotify',
        'autoGeneratedJobsNotify',
        'proServiceNotify',
        'unapprovedPaymentsNotify',
    ];

    /**
     * @return array
     */
    public function getAllowedForRoles()
    {
        return [
            Role::ROLE_ADMIN => self::$notificationContentMethods,
            Role::ROLE_SUPER_ADMIN => self::$notificationContentMethods,
            Role::ROLE_TESTER_ADMIN => self::$notificationContentMethods,
        ];
    }

    /**
     * @var null|integer $notificationsCount
     */
    private $notificationsCount;

    /**
     * @var string $notificationsCount
     */
    private $content;

    /**
     * Increment counter
     * @param integer $value
     */
    private function incrementCounter($value)
    {
        $this->notificationsCount += $value;
    }

    /**
     * @return string
     */
    private function newStudentsNotify()
    {
        return $this->newUsersNotify(static::USER_TYPE_STUDENT);
    }

    /**
     * @return string
     */
    private function newTutorsNotify()
    {
        return $this->newUsersNotify(static::USER_TYPE_TUTOR);
    }

    /**
     * @param string $type Role of user
     * @return bool|string
     */
    private function newUsersNotify($type)
    {
        $newUsersCount = Account::find()->newRegistered()->{$type}()->count();
        $this->incrementCounter($newUsersCount);
        return $newUsersCount ? $this->render('_newUsers', ['count' => $newUsersCount, 'type' => $type]) : false;
    }

    /**
     * @param string $type Role of user
     * @return bool|string
     */
    private function suspiciousUsersNotify()
    {
        $dataProvider = (new ChatSearch(['onlySuspicious' => true]))->search([]);
        $this->incrementCounter($dataProvider->totalCount);
        return $dataProvider->totalCount ? $this->render('_suspiciousUsers', ['count' => $dataProvider->totalCount]) : false;
    }

    /**
     * @return string
     */
    private function autoGeneratedJobsNotify()
    {
        $generatedJobsCount = Job::find()->andWhere(['autogenerate' => true, 'status' => Job::UNPUBLISH])->count();
        $this->incrementCounter($generatedJobsCount);
        return $generatedJobsCount ? $this->render('_generatedJobs', ['count' => $generatedJobsCount]) : false;
    }

    /**
     * @return string
     */
    private function proServiceNotify()
    {
        $proServiceCount = TutorPro::find()->new()->count();
        $this->incrementCounter($proServiceCount);
        return $proServiceCount ? $this->render('_proService', ['count' => $proServiceCount]) : false;
    }

    /**
     * @return string
     */
    private function unapprovedPaymentsNotify()
    {
        $unapprovedPaymentsCount = Transaction::find()->waitingForApprove()->count();
        $this->incrementCounter($unapprovedPaymentsCount);
        return $unapprovedPaymentsCount ? $this->render('_unapprovedPayments', ['count' => $unapprovedPaymentsCount]) : false;
    }

    /**
     * Generate content of notification
     */
    private function generateContent()
    {
        $content = '';

        foreach (static::$notificationContentMethods as $method) {
            $allowedMethods = $this->getAllowedForRoles()[Yii::$app->user->identity->roleId];

            if (in_array($method, $allowedMethods) === false) {
                continue;
            }

            $itemContent = $this->{$method}();
            if ($itemContent) {
                $content .= $itemContent;
            }
        }
        $this->content =  $content;
    }


    /**
     * @inheritdoc
     */
    public function run()
    {
        $this->generateContent();
        return $this->render('index', [
            'notificationsCount' => $this->notificationsCount,
            'content' => $this->content
        ]);
    }
}
